// Lab_05_4.cpp
// < Величко Іван >
// Лабораторна робота № 5.4
// Обчислення сум та добутків за допомогою рекурсії
// Варіант 0.4

#include <iostream>
#include <cmath>

using namespace std;

// Ітеративна функція для обчислення суми
double S0(const int j, const int N)
{
	double s = 0;
	// Цикл для обчислення суми в діапазоні від j до N
	for (int i = j; i <= N; i++)
		s += (1.0 + i / N) / i * i;
	return s;
}

// Рекурсивна функція для обчислення суми, рух вгору від j до N (++)
double S1(const int j, const int N, const int i)
{
	if (i > N)  // Базовий випадок: коли i перевищує N, зупиняємо рекурсію
		return 0;
	else
		// Рекурсивний виклик з підсумовуванням результату
		return (1.0 + i / N) / i * i + S1(j, N, i + 1);
}

// Рекурсивна функція для обчислення суми, рух вниз від N до j (--)
double S2(const int j, const int N, const int i)
{
	if (i < j)  // Базовий випадок: коли i менше j, зупиняємо рекурсію
		return 0;
	else
		// Рекурсивний виклик з підсумовуванням результату
		return (1.0 + i / N) / i * i + S2(j, N, i - 1);
}

// Рекурсивна функція з накопиченням суми, рух вгору (++), використовується додатковий параметр t для накопичення
double S3(const int j, const int N, const int i, double t)
{
	t = t + (1.0 + i / N) / i * i;  // Накопичення поточного значення в t
	if (i >= N)  // Базовий випадок: коли i досягне або перевищить N, зупиняємо рекурсію
		return t;
	else
		// Рекурсивний виклик з передачею оновленого значення t
		return S3(j, N, i + 1, t);
}

// Рекурсивна функція з накопиченням суми, рух вниз (--), використовується додатковий параметр t для накопичення
double S4(const int j, const int N, const int i, double t)
{
	t = t + (1.0 + i / N) / i * i;  // Накопичення поточного значення в t
	if (i <= j)  // Базовий випадок: коли i досягне або стане меншим за j, зупиняємо рекурсію
		return t;
	else
		// Рекурсивний виклик з передачею оновленого значення t
		return S4(j, N, i - 1, t);
}

int main()
{
	int N;
	int j = 1;

	cout << "N = "; cin >> N;  // Введення значення N з клавіатури

	// Виклики функцій для обчислення суми різними способами та виведення результатів
	cout << "(iter) S0 = " << S0(j, N) << endl;
	cout << "(rec up ++) S1 = " << S1(j, N, j) << endl;
	cout << "(rec up --) S2 = " << S2(j, N, N) << endl;
	cout << "(rec down ++) S3 = " << S3(j, N, j, 0) << endl;
	cout << "(rec down --) S4 = " << S4(j, N, N, 0) << endl;

	return 0;
}
