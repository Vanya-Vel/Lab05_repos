// Lab_05_2.cpp
// < Величко Іван >
// Лабораторна робота № 5.2
// Обчислення суми ряду Тейлора за допомогою функцій
// Варіант 0.4

#include <iostream>
#include <iomanip>
#include <cmath>

using namespace std;

void L(const double x, const double eps, int& n, double& s);
void A(const double x, const int n, double& a);

int main()
{
	// Оголошення змінних
	double xp, xk, x, dx, eps, a = 0, R = 0, s = 0;
	int n = 0;

	// Введення початкового та кінцевого значень x, кроку dx, та точності eps
	cout << "xp = "; cin >> xp;  // Вводимо початкове значення x
	cout << "xk = "; cin >> xk;  // Вводимо кінцеве значення x
	cout << "dx = "; cin >> dx;  // Вводимо крок зміни x
	cout << "eps = "; cin >> eps;  // Вводимо точність epsilon (eps)
	cout << fixed;  // Фіксуємо кількість знаків після коми для виведення

	// Виведення заголовку таблиці
	cout << "-------------------------------------------------" << endl;
	cout << "|" << setw(7) << "x" << " |"      // Відведення місця для значення x (5 символів)
		<< setw(10) << "ln(x + 1)" << " |"      // Місце для функції exp(x) (10 символів)
		<< setw(10) << "S" << " |"            // Місце для суми ряду S (7 символів)
		<< setw(5) << "n" << " |"            // Місце для кількості ітерацій n (5 символів)
		<< endl;
	cout << "-------------------------------------------------" << endl;

	// Цикл по значеннях x від xp до xk з кроком dx
	x = xp;

	while (x <= xk)
	{
		L(x, eps, n, s);
		// Виведення результатів в таблиці
		cout << "|" << setw(7) << setprecision(2) << x << " |"  // Виведення x з точністю до 2 знаків
			<< setw(10) << setprecision(5) << log(x + 1) << " |"    // Виведення точного значення exp(x)
			<< setw(10) << setprecision(5) << s << " |"         // Виведення наближеного значення S
			<< setw(5) << n << " |"                             // Виведення кількості ітерацій
			<< endl;
		x += dx;
	}
	cout << "-------------------------------------------------" << endl;
	return 0;
}

void L(const double x, const double eps, int& n, double& s)
{
	n = 0; // вираз залежить від умови завдання варіанту
	double a = x; // вираз залежить від умови завдання варіанту
	s = a;
	do {
		n++;
		A(x, n, a);
		s += a;
	} while (abs(a) >= eps);
}

void A(const double x, const int n, double& a)
{
	double R = -x * n / (1.0 * n + 1); // вираз залежить від умови завдання варіанту
	a *= R;
}